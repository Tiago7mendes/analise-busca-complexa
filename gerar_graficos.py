#!/usr/bin/env python3
"""
Gerador de Gr√°ficos para TP1 - Algoritmos de Pesquisa
L√™ os resultados do arquivo CSV gerado pelo programa em C
e gera gr√°ficos comparativos autom√°ticos
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from pathlib import Path
import os
import sys

# Configura√ß√£o do estilo dos gr√°ficos
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 12

class GeradorGraficos:
    def __init__(self, arquivo_csv='resultados_tp1.csv'):
        self.arquivo_csv = arquivo_csv
        self.df = None
        self.verificar_arquivo()

    def verificar_arquivo(self):
        """Verifica se o arquivo CSV existe"""
        if not os.path.exists(self.arquivo_csv):
            print(f"‚ùå ERRO: Arquivo '{self.arquivo_csv}' n√£o encontrado!")
            print("\nüîß SOLU√á√ÉO:")
            print("1. Compile e execute o programa C primeiro:")
            print("   gcc tp1_busca_com_csv.c -o tp1_busca")
            print("   ./tp1_busca")
            print("2. Depois execute este script Python")
            sys.exit(1)

        print(f"‚úÖ Arquivo CSV encontrado: {self.arquivo_csv}")

    def carregar_dados(self):
        """Carrega e processa os dados do CSV"""
        try:
            self.df = pd.read_csv(self.arquivo_csv)
            print("üìä Dados carregados com sucesso!")
            print(f"   Linhas: {len(self.df)}")
            print(f"   Colunas: {list(self.df.columns)}")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao carregar CSV: {e}")
            return False

    def grafico_tempo_execucao(self):
        """Gr√°fico comparando tempos de execu√ß√£o"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # Gr√°fico 1: Tempos absolutos
        x = range(len(self.df))
        width = 0.35

        ax1.bar([i - width/2 for i in x], self.df['Tempo_Sequencial_ms'], 
                width, label='Busca Sequencial', alpha=0.8, color='#e74c3c')
        ax1.bar([i + width/2 for i in x], self.df['Tempo_Binaria_ms'], 
                width, label='Busca Bin√°ria', alpha=0.8, color='#3498db')

        ax1.set_xlabel('Tamanho do Vetor')
        ax1.set_ylabel('Tempo de Execu√ß√£o (ms)')
        ax1.set_title('Compara√ß√£o de Tempo de Execu√ß√£o')
        ax1.set_xticks(x)
        ax1.set_xticklabels([f'{int(t/1000)}K' for t in self.df['Tamanho']])
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # Gr√°fico 2: Escala logar√≠tmica para melhor visualiza√ß√£o
        ax2.semilogy(self.df['Tamanho'], self.df['Tempo_Sequencial_ms'], 
                     'o-', label='Busca Sequencial', linewidth=2, markersize=8, color='#e74c3c')
        ax2.semilogy(self.df['Tamanho'], self.df['Tempo_Binaria_ms'], 
                     's-', label='Busca Bin√°ria', linewidth=2, markersize=8, color='#3498db')

        ax2.set_xlabel('Tamanho do Vetor (N)')
        ax2.set_ylabel('Tempo de Execu√ß√£o (ms) - Escala Log')
        ax2.set_title('Tempo de Execu√ß√£o - Escala Logar√≠tmica')
        ax2.legend()
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('grafico_tempo_execucao.png', dpi=300, bbox_inches='tight')
        print("üìà Gr√°fico salvo: grafico_tempo_execucao.png")

    def grafico_comparacoes(self):
        """Gr√°fico comparando n√∫mero de compara√ß√µes"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # Gr√°fico 1: Compara√ß√µes absolutas
        x = range(len(self.df))
        width = 0.35

        ax1.bar([i - width/2 for i in x], self.df['Comp_Sequencial'], 
                width, label='Busca Sequencial', alpha=0.8, color='#f39c12')
        ax1.bar([i + width/2 for i in x], self.df['Comp_Binaria'], 
                width, label='Busca Bin√°ria', alpha=0.8, color='#27ae60')

        ax1.set_xlabel('Tamanho do Vetor')
        ax1.set_ylabel('N√∫mero M√©dio de Compara√ß√µes')
        ax1.set_title('Compara√ß√£o do N√∫mero de Compara√ß√µes')
        ax1.set_xticks(x)
        ax1.set_xticklabels([f'{int(t/1000)}K' for t in self.df['Tamanho']])
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # Gr√°fico 2: Escala logar√≠tmica
        ax2.semilogy(self.df['Tamanho'], self.df['Comp_Sequencial'], 
                     'o-', label='Busca Sequencial', linewidth=2, markersize=8, color='#f39c12')
        ax2.semilogy(self.df['Tamanho'], self.df['Comp_Binaria'], 
                     's-', label='Busca Bin√°ria', linewidth=2, markersize=8, color='#27ae60')

        ax2.set_xlabel('Tamanho do Vetor (N)')
        ax2.set_ylabel('Compara√ß√µes - Escala Log')
        ax2.set_title('N√∫mero de Compara√ß√µes - Escala Logar√≠tmica')
        ax2.legend()
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('grafico_comparacoes.png', dpi=300, bbox_inches='tight')
        print("üìà Gr√°fico salvo: grafico_comparacoes.png")

    def grafico_complexidade_teorica(self):
        """Gr√°fico comparando resultados pr√°ticos com complexidade te√≥rica"""
        # Gerar pontos te√≥ricos
        n_teorico = np.linspace(10000, 100000, 100)
        linear_teorico = n_teorico / 2  # O(n) caso m√©dio
        log_teorico = np.log2(n_teorico)  # O(log n)

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # Gr√°fico 1: Compara√ß√µes pr√°ticas vs te√≥ricas
        ax1.plot(n_teorico, linear_teorico, '--', alpha=0.7, color='#e74c3c', 
                label='Te√≥rico O(n)', linewidth=2)
        ax1.plot(n_teorico, log_teorico * 100, '--', alpha=0.7, color='#3498db', 
                label='Te√≥rico O(log n) √ó 100', linewidth=2)

        ax1.scatter(self.df['Tamanho'], self.df['Comp_Sequencial'], 
                   s=100, color='#c0392b', label='Sequencial Real', zorder=5)
        ax1.scatter(self.df['Tamanho'], self.df['Comp_Binaria'], 
                   s=100, color='#2980b9', label='Bin√°ria Real', zorder=5)

        ax1.set_xlabel('Tamanho do Vetor (N)')
        ax1.set_ylabel('N√∫mero de Compara√ß√µes')
        ax1.set_title('Resultados Pr√°ticos vs Complexidade Te√≥rica')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # Gr√°fico 2: Raz√£o de melhoria
        ax2.bar(range(len(self.df)), self.df['Reducao_Comparacoes'], 
                alpha=0.8, color='#9b59b6')
        ax2.set_xlabel('Tamanho do Vetor')
        ax2.set_ylabel('Fator de Redu√ß√£o (vezes)')
        ax2.set_title('Quantas Vezes a Busca Bin√°ria √© Melhor')
        ax2.set_xticks(range(len(self.df)))
        ax2.set_xticklabels([f'{int(t/1000)}K' for t in self.df['Tamanho']])
        ax2.grid(True, alpha=0.3)

        # Adicionar valores nas barras
        for i, v in enumerate(self.df['Reducao_Comparacoes']):
            ax2.text(i, v + max(self.df['Reducao_Comparacoes']) * 0.01, 
                    f'{v:.1f}x', ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        plt.savefig('grafico_complexidade_teorica.png', dpi=300, bbox_inches='tight')
        print("üìà Gr√°fico salvo: grafico_complexidade_teorica.png")

    def grafico_speedup(self):
        """Gr√°fico mostrando o speedup da busca bin√°ria"""
        fig, ax = plt.subplots(figsize=(10, 6))

        bars = ax.bar(range(len(self.df)), self.df['Speedup_Tempo'], 
                     alpha=0.8, color=['#e67e22', '#d35400', '#a0522d'])

        ax.set_xlabel('Tamanho do Vetor')
        ax.set_ylabel('Speedup (vezes mais r√°pida)')
        ax.set_title('Speedup da Busca Bin√°ria vs Sequencial')
        ax.set_xticks(range(len(self.df)))
        ax.set_xticklabels([f'{int(t/1000)}K' for t in self.df['Tamanho']])
        ax.grid(True, alpha=0.3)

        # Adicionar valores nas barras
        for i, (bar, v) in enumerate(zip(bars, self.df['Speedup_Tempo'])):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                   f'{v:.1f}x', ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        plt.savefig('grafico_speedup.png', dpi=300, bbox_inches='tight')
        print("üìà Gr√°fico salvo: grafico_speedup.png")

    def tabela_resultados(self):
        """Cria uma tabela formatada dos resultados"""
        fig, ax = plt.subplots(figsize=(14, 6))
        ax.axis('tight')
        ax.axis('off')

        # Preparar dados da tabela
        dados_tabela = [
            ['Tamanho (N)', 'Tempo Seq. (ms)', 'Tempo Bin. (ms)', 
             'Comp. Seq.', 'Comp. Bin.', 'Speedup', 'Redu√ß√£o Comp.']
        ]

        for _, row in self.df.iterrows():
            dados_tabela.append([
                f"{int(row['Tamanho']):,}",
                f"{row['Tempo_Sequencial_ms']:.3f}",
                f"{row['Tempo_Binaria_ms']:.3f}",
                f"{row['Comp_Sequencial']:.1f}",
                f"{row['Comp_Binaria']:.1f}",
                f"{row['Speedup_Tempo']:.1f}x",
                f"{row['Reducao_Comparacoes']:.1f}x"
            ])

        table = ax.table(cellText=dados_tabela[1:], colLabels=dados_tabela[0],
                        cellLoc='center', loc='center')
        table.auto_set_font_size(False)
        table.set_fontsize(10)
        table.scale(1.2, 1.5)

        # Formata√ß√£o da tabela
        for i in range(len(dados_tabela[0])):
            table[(0, i)].set_facecolor('#34495e')
            table[(0, i)].set_text_props(weight='bold', color='white')

        plt.title('Resultados Completos do TP1 - Algoritmos de Pesquisa', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.savefig('tabela_resultados.png', dpi=300, bbox_inches='tight')
        print("üìä Tabela salva: tabela_resultados.png")

    def gerar_todos_graficos(self):
        """Gera todos os gr√°ficos"""
        if not self.carregar_dados():
            return False

        print("\nüé® Gerando gr√°ficos...")

        try:
            self.grafico_tempo_execucao()
            self.grafico_comparacoes()
            self.grafico_complexidade_teorica()
            self.grafico_speedup()
            self.tabela_resultados()

            print("\n‚úÖ TODOS OS GR√ÅFICOS GERADOS COM SUCESSO!")
            print("\nüìÅ Arquivos criados:")
            print("  ‚Ä¢ grafico_tempo_execucao.png")
            print("  ‚Ä¢ grafico_comparacoes.png") 
            print("  ‚Ä¢ grafico_complexidade_teorica.png")
            print("  ‚Ä¢ grafico_speedup.png")
            print("  ‚Ä¢ tabela_resultados.png")

            return True

        except Exception as e:
            print(f"‚ùå Erro ao gerar gr√°ficos: {e}")
            return False

    def mostrar_estatisticas(self):
        """Mostra estat√≠sticas resumidas dos resultados"""
        if self.df is None:
            return

        print("\nüìä ESTAT√çSTICAS DOS RESULTADOS:")
        print("=" * 50)

        for _, row in self.df.iterrows():
            print(f"\nTamanho N = {int(row['Tamanho']):,}:")
            print(f"  Busca Sequencial: {row['Tempo_Sequencial_ms']:.3f} ms, {row['Comp_Sequencial']:.1f} compara√ß√µes")
            print(f"  Busca Bin√°ria:    {row['Tempo_Binaria_ms']:.3f} ms, {row['Comp_Binaria']:.1f} compara√ß√µes")
            print(f"  Melhoria:         {row['Speedup_Tempo']:.1f}x tempo, {row['Reducao_Comparacoes']:.1f}x compara√ß√µes")

def main():
    print("üöÄ GERADOR DE GR√ÅFICOS - TP1 ALGORITMOS DE PESQUISA")
    print("=" * 60)

    gerador = GeradorGraficos()

    if gerador.gerar_todos_graficos():
        gerador.mostrar_estatisticas()

        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("1. Use os gr√°ficos gerados no seu relat√≥rio")
        print("2. Compare os resultados com as complexidades te√≥ricas")
        print("3. Analise como a diferen√ßa cresce com o tamanho do vetor")

    else:
        print("\n‚ùå Falha ao gerar gr√°ficos!")

if __name__ == "__main__":
    main()
